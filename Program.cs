// See https://aka.ms/new-console-template for more information

using System;
using System.IO; //For checking if directory provided is valid
using System.Diagnostics; //Stopwatch
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Numerics; //BigInteger
using System.Security.Cryptography; //RandomNumberGenerator
using System.Threading;
using System.Threading.Tasks;



class Program
{

    //Globals

    public class GlobalStrings{
        public static string expectedArgs = @"dotnet run <bits> <option> <count>
        - bits - the number of bits of the number to begenerated, this must
        be a multiple of 8, and at least 32bits.
        - option - 'odd' or'prime' (the type of numbers to be generated)
        - count - the count of numbers to generate, defaults to 1";
    }   

    public class PrimeValues{
        public static List<int> primes = new List<int> {
                3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
                73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
                157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
                239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
                331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
                421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
                509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
                613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
                709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
                821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
                919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
            };
    }

    static BigInteger GenerateBigInt(int bits){

        int byteSize = bits / 8;
        byte[] randomBytes = new byte[byteSize];

        using (RandomNumberGenerator rng = RandomNumberGenerator.Create()){ 
            rng.GetBytes(randomBytes);
        }

        //Testing
        // Console.WriteLine("Generated Bytes Original:");
        // foreach (byte b in randomBytes)
        // {
        //     Console.Write($"{b:X2} ");
        // }
        // Console.WriteLine();

        //Reverse Byte arr due to BigInteger assuming littleEndian
        Array.Reverse(randomBytes);

        // Console.WriteLine("Generated Bytes Reversed:");
        // foreach (byte b in randomBytes)
        // {
        //     Console.Write($"{b:X2} ");
        // }
        // Console.WriteLine();
        
        BigInteger randomBigInt = new BigInteger(randomBytes);
        

        if(randomBigInt < 0){
            randomBigInt = -randomBigInt;

        }
        return randomBigInt;

    }

    static async Task Main(string[] args)
    {

        if(args.Length > 1 && args.Length <= 3){
            ;
        }
        else{
            Console.WriteLine("Expected between 1 and 3 arguments (inclusive).");
            Console.WriteLine("\n" + GlobalStrings.expectedArgs + "\n");
            throw new ArgumentException("Invalid argument ammount provided.");
        }

        //Handling for Bits argument
        int bits = int.Parse(args[0]);

        bool throwBitExc = false;
        if(bits%8 != 0){
            Console.WriteLine("Expected multiple of 8 bits for bits argument.");
            throwBitExc = true;
        }
        if(bits < 32){
            Console.WriteLine("Expected bits value greater than 32.");
            throwBitExc = true;
        }
        if(throwBitExc){
            Console.WriteLine("\n" + GlobalStrings.expectedArgs + "\n");
            throw new ArgumentException("Provided bit value is invalid, see above messages.");
        }
        //Console.WriteLine("BitLength: " + bits);

        string opt = args[1].ToLower();
        //Console.WriteLine("Test: " + opt);

        if(opt != "odd" && opt != "prime"){
            Console.WriteLine("Expected values 'odd' or 'prime' for 2nd argument.");
            Console.WriteLine("\n" + GlobalStrings.expectedArgs + "\n");
            throw new ArgumentException("Provided option value does not match 'odd' or 'prime'.");
        }

        int count = 1; // Default to 1

        if (args.Length > 2 && !int.TryParse(args[2], out count))
        {
            Console.WriteLine("Expected number value for count.");
            Console.WriteLine("\n" + GlobalStrings.expectedArgs + "\n");
        }
        //Console.WriteLine($"Count is: {count}");

        List<Task> tasks = new List<Task>();

        if (opt == "odd"){
            List<BigInteger> validNumbers = new List<BigInteger>();
            object lockObj = new object();

            int taskNum = 0;

            while (true)
            {
                tasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        BigInteger val = GenerateBigInt(bits);

                        if (val % 2 == 1) // Ensure odd
                        {
                            lock (lockObj)
                            {
                                if (validNumbers.Count >= count) return; // Stop extra numbers
                                validNumbers.Add(val);
                                //Console.WriteLine($"validCount so far: {validNumbers.Count}");
                            }

                            await odd(val, bits, taskNum );
                            //Console.WriteLine($"Processed: {validNumbers.Count}, Val: {val}, Count: {count}");
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Error: " + e);
                    }
                }));

                taskNum++;

                await Task.Delay(20);

                if (validNumbers.Count >= count) break; // Stop loop when we have enough numbers
            }
        }

        else if(opt == "prime"){

        }

        // Console.WriteLine(tasks.Count);
        // foreach( Task t in tasks){
        //     Console.WriteLine(t);
        // }

        await Task.WhenAll(tasks);
        Console.WriteLine("All tasks done");

  }

    public static async Task odd(BigInteger val, int bitLen, int valid){
        //Console.WriteLine("Odd on: " + val);

        Stopwatch stopwatch = new Stopwatch(); //

        stopwatch.Start(); 

        //work
        //TEST System.Threading.Thread.Sleep(1500); 
        
        int factors = 1;

        if(val > 1){

            //start @ 3 since odd, so no need for 2, i^2 is max cause root(i) is max factor
            for(BigInteger i = 3; i * i <= val; i += 2){

                //tracker for same factor multiple times
                int exp = 0;

                //while remainder doesnt exists (even divisibility)
                while (val % i == 0){
                    exp++; //add 1 to exp val
                    val /= i; //divide, check for reminder
                }
                if(exp > 0){ //after division multiple times, add exponend to factor amt
                    //add to count all values that would be able to make the found factor
                    factors *= exp + 1;
                }
            }
        }

        if(val > 1){ //acount for prime value
            factors *= 2;
        }
        stopwatch.Stop(); 

        double elapsedSeconds = stopwatch.Elapsed.TotalSeconds; 

        Console.WriteLine("BitLength: " + bitLen);
        Console.WriteLine(valid + ": " + val);
        Console.WriteLine("Number of factors: " + factors);
        Console.WriteLine();

        await Task.CompletedTask;
    }
}